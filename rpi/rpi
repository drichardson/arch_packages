#!/usr/bin/python3
# PYTHON_ARGCOMPLETE_OK

import sys
import argparse
import subprocess
import os.path

# Conditional support for bash completion
try:
    import argcomplete
    has_argcomplete=True
except ImportError:
    has_argcomplete=False

class Config:
    pass

# C is the configuration and the initial values are below.
C = Config()
C.RPI_MOUNT_DIR=os.path.expanduser("~/rpi_mnt")
C.RPI_MOUNT_ROOT=os.path.join(C.RPI_MOUNT_DIR, "root")
C.RPI_MOUNT_BOOT=os.path.join(C.RPI_MOUNT_DIR, "boot")
C.SD_CARD_BOOT_PARTITION="/dev/sdc1"
C.SD_CARD_ROOT_PARTITION="/dev/sdc2"
C.KERNEL_SRC=os.path.expanduser("~/linux")
C.RASPBERRYPI_TOOLS=os.path.expanduser("~/raspberrypi-tools")
C.CROSS_COMPILE=os.path.expanduser("~/x-tools6h/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-")
C.USB_SERIAL_TTY="/dev/ttyUSB0"
C.CLANG_COMPLETE_CCARGS=os.path.expanduser("~/.vim/bundle/clang_complete/bin/cc_args.py")

def true_or_die(condition, message):
    if not condition:
        print("ERROR: ", message, file=sys.stderr)
        sys.exit(1)

def sudo(argv):
    a=["/usr/bin/sudo"]
    a.extend(argv)
    return subprocess.call(a)

def mount():
    print("Mounting SD card partitions")
    if not os.path.ismount(C.RPI_MOUNT_BOOT):
        rc = sudo(["/usr/bin/mount", C.SD_CARD_BOOT_PARTITION, C.RPI_MOUNT_BOOT])
        true_or_die(rc == 0, "Failed to mount boot partition")
    if not os.path.ismount(C.RPI_MOUNT_ROOT):
        rc2 = sudo(["/usr/bin/mount", C.SD_CARD_ROOT_PARTITION, C.RPI_MOUNT_ROOT])
        true_or_die(rc == 0, "Failed to mount root partition")

def umount():
    print("Unmounting SD card partitions")
    if os.path.ismount(C.RPI_MOUNT_BOOT):
        rc = sudo(["/usr/bin/umount", C.RPI_MOUNT_BOOT])
        true_or_die(rc == 0, "umount failed on boot partition")
    if os.path.ismount(C.RPI_MOUNT_ROOT):
        rc = sudo(["/usr/bin/umount", C.RPI_MOUNT_ROOT])
        true_or_die(rc == 0, "umount failed on root partition")

def mkimage():
    mkimage_dir=os.path.join(C.RASPBERRYPI_TOOLS, "mkimage")
    zImage_path = os.path.join(C.KERNEL_SRC, "arch/arm/boot/zImage")
    argv=["./imagetool-uncompressed.py", zImage_path]
    print("Uncompressing kernel image to ", mkimage_dir)
    cmd = subprocess.Popen(argv, cwd=mkimage_dir)
    rc = cmd.wait()
    true_or_die(rc == 0, "imagetool-uncompressed.py failed")

def cpimage():
    kernel_img=os.path.join(C.RASPBERRYPI_TOOLS, "mkimage/kernel.img")
    dest=os.path.join(C.RPI_MOUNT_BOOT, "kernel-new.img")
    print("Copying kernel image to ", dest)
    rc = sudo(["/usr/bin/cp", kernel_img, dest])
    true_or_die(rc == 0, "failed to copy kernel image")

def cpmodules():
    argv = ["/usr/bin/tar"]
    cmd = subprocess.Popen(argv, cwd=mkimage_dir)
    pass

def make_call_args(make_options):
    cross_compile="CROSS_COMPILE=" + C.CROSS_COMPILE
    arch="ARCH=arm"
    argv = ["/usr/bin/make", "-C", C.KERNEL_SRC, "-j8", cross_compile, arch]
    argv.extend(make_options)
    return argv

def make(make_options):
    cmd = subprocess.Popen(make_call_args(make_options))
    rc = cmd.wait()
    true_or_die(rc == 0, "make failed")

def make_if_not_modules_install(make_options):
    true_or_die("modules_install" not in make_options, "Use modules_install command instead")
    true_or_die("firmware_install" not in make_options, "Use modules_install command instead")
    make(make_options)

def modules_install():
    # Make sure the root directory is mounted.
    true_or_die(os.path.ismount(C.RPI_MOUNT_ROOT), "Root partition not mounted. Try rpi mount")

    # Create a clean modules_tmp, so that old modules aren't accidentally included.
    #subprocess.call(["/usr/bin/rm", "-rf", C.INSTALL_MOD_PATH])
    #rc = subprocess.call(["/usr/bin/mkdir", C.INSTALL_MOD_PATH])
    #true_or_die(rc == 0, "mkdir failed to create " + C.INSTALL_MOD_PATH)

    # Make sure the modules are built as the current user before running sudo make modules_install
    make(["modules"])

    # Run kernel makefile's modules_install and firmware_install targets.
    mod_path = "INSTALL_MOD_PATH="+C.RPI_MOUNT_ROOT
    rc = sudo(make_call_args([mod_path, "modules_install", "firmware_install"]))
    true_or_die(rc == 0, "Error installing modules and firmware")

def all():
    make([])
    mkimage()
    mount()
    modules_install()
    cpimage()
    umount()

def all_clean():
    make(["clean"])
    all()

def kernel():
    make([])
    mkimage()
    mount()
    cpimage()
    umount()

def cat():
    rc = subprocess.call(['/usr/bin/stty', '-F', C.USB_SERIAL_TTY, "raw"])
    true_or_die(rc == 0, "Problem fixing up usb-serial device tty settings.")
    try:
        rc = subprocess.call(['/usr/bin/cat', C.USB_SERIAL_TTY])
        true_or_die(rc == 0, "Problem catting usb-serial tty " + C.USB_SERIAL_TTY)
    except KeyboardInterrupt:
        sys.exit(0)

def cc_args():
    save=C.CROSS_COMPILE
    C.CROSS_COMPILE=C.CLANG_COMPLETE_CCARGS + " " + C.CROSS_COMPILE
    make([])
    C.CROSS_COMPILE=save

def config_key_value_pairs():
    return [kv for kv in vars(C).items() if kv[0][0].isupper()]

def config():
    for key,value in sorted(config_key_value_pairs()):
        print(key,":",value)

def ctags(options):
    save_cwd = os.getcwd()
    os.chdir(C.KERNEL_SRC)

    # exclude non-ARM architecture directories
    excludes = ["arch/"+d for d in os.listdir("arch") if d != "arm"]
    # exclude options prefixed with no. E.g., nodrivers
    excludes += [d[2:] for d in options if d[0:2] == "no"]

    argv = ["/usr/bin/ctags", "-R", "."] + ["--exclude="+d for d in excludes]
    print("Running ", " ".join(argv))
    rc = subprocess.call(argv)
    true_or_die(rc == 0, "ctags failed")
    os.chdir(save_cwd)

def parse(argv):
    p = argparse.ArgumentParser(description="Raspberry Pi dev workflow utility")

    options=[]

    handlers = {
        "mount" : mount,
        "umount" : umount,
        "mkimage" : mkimage,
        "cpimage" : cpimage,
        "cpmodules" : cpmodules,
        "make" : lambda: make_if_not_modules_install(options),
        "modules_install" : modules_install,
        "all" : all,
        "kernel" : kernel,
        "all_clean" : all_clean,
        "cat": cat,
        "cc_args": cc_args,
        "config": config,
        "ctags": lambda: ctags(options),
    }

    p.add_argument("command", choices=dict.keys(handlers))
    p.add_argument("options", nargs='*')

    # bash and zsh completion
    if has_argcomplete:
        argcomplete.autocomplete(p)

    result = p.parse_args(argv)
    result.handler = handlers[result.command]

    # update options for use of the lambda above
    options=result.options

    return result

def prompt_for_initial_config(path):
    for key,value in sorted(config_key_value_pairs()):
        print(key,"["+value+"] ", end="", flush=True)
        line=sys.stdin.readline().rstrip()
        if len(line) > 0:
            C.__dict__[key] = line

def write_config(path):
    with open(path, "w") as out:
        for key,value in config_key_value_pairs():
            print(key,"=",value,file=out,sep="")

def read_config(path):
    with open(path, "r") as f:
        for line in f:
            key,value=line.split('=')
            key=key.strip()
            value=value.strip()
            C.__dict__[key]=value

def main():
    args = parse(sys.argv[1:])

    # Read config
    config_path=os.path.expanduser("~/.rpi_config")
    if not os.path.exists(config_path):
        print("No config file found at " + config_path + ". Will prompt for configuration values.")
        prompt_for_initial_config(config_path)
        print("Saving configuration to " + config_path)
        write_config(config_path)
    read_config(config_path)

    args.handler()
    print("OK", args.command)

main()
